# -*- coding: utf-8 -*-
"""Master's Thesis - Hyperparameter search.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1huRoHI_kXr8EX0ro0Ud33cKWmtF788n3

# Install Detectron2 and its dependencies
"""

!pip install pyyaml==5.1
!pip install torch==1.8.0+cu101 torchvision==0.9.0+cu101 -f https://download.pytorch.org/whl/torch_stable.html
!pip install detectron2 -f https://dl.fbaipublicfiles.com/detectron2/wheels/cu101/torch1.8/index.html

"""# Imports"""

# Commented out IPython magic to ensure Python compatibility.
import torch
assert torch.__version__.startswith("1.8") 
import torchvision
import cv2
from google.colab import drive

#Import some common imports
import itertools
import os
import shutil
import pandas as pd
import numpy as np
import json
import random
import copy
import matplotlib.pyplot as plt
# %matplotlib inline

# import some common detectron2 utilities
from detectron2 import model_zoo
from detectron2.engine import DefaultPredictor
from detectron2.config import get_cfg
from detectron2.utils.visualizer import Visualizer
from detectron2.data import MetadataCatalog
from detectron2.evaluation import COCOEvaluator, inference_on_dataset
from detectron2.utils.visualizer import ColorMode
from detectron2.structures import BoxMode
from detectron2.data import DatasetCatalog
from detectron2.data import detection_utils as utils
import detectron2.data.transforms as T
from detectron2.engine import DefaultTrainer
from detectron2.data import build_detection_test_loader, build_detection_train_loader
import detectron2
import logging
from detectron2.utils.logger import setup_logger
setup_logger()

#imports to the validation hook
from detectron2.engine.hooks import HookBase
from detectron2.evaluation import inference_context
from detectron2.utils.logger import log_every_n_seconds
from detectron2.data import DatasetMapper
import detectron2.utils.comm as comm
import time
import datetime
from detectron2.engine import launch

"""# Prepare the dataset

## Mount to drive
"""

drive.mount('/content/drive') #This step should be avoided if data is not placed on drive

"""Note that the following code has taken inspiration from different resources: The custom mapper and loss hook has taken inspiration from the "VinBigData detectron2 train" kaggle. URL: https://www.kaggle.com/code/corochann/vinbigdata-detectron2-train. 
The function to convert data to coco format has taken inspiration from the "Detectron 2 compare models + augmentation" kaggle. URL:https://www.kaggle.com/code/dhiiyaur/detectron-2-compare-models-augmentation

## Make function to convert data to COCO format
"""

def get_data_dicts(directory, classes):
    dataset_dicts = []
    for filename in [file for file in os.listdir(directory) if file.endswith('.json')]:
        json_file = os.path.join(directory, filename)
        with open(json_file) as f:
            img_anns = json.load(f)

        record = {}
        
        filename = os.path.join(directory, img_anns["imagePath"])
        
        record["file_name"] = filename
        record["image_id"] = filename
        record["height"] = 480
        record["width"] = 640
      
        annos = img_anns["shapes"]
        objs = []
        for anno in annos:
            px = [a[0] for a in anno['points']] # x coord
            py = [a[1] for a in anno['points']] # y-coord
            poly = [(x, y) for x, y in zip(px, py)] # poly 
            poly = [p for x in poly for p in x]

            obj = {
                "bbox": [np.min(px), np.min(py), np.max(px), np.max(py)],
                "bbox_mode": BoxMode.XYXY_ABS,
                "segmentation": [poly],
                "category_id": classes.index(anno['label']),
                "iscrowd": 0
            }
            objs.append(obj)
        record["annotations"] = objs
        dataset_dicts.append(record)
    return dataset_dicts

"""## Make custom mapper for data augmentation"""

def custom_mapper(dataset_dict):
    dataset_dict = copy.deepcopy(dataset_dict)  
    image = utils.read_image(dataset_dict["file_name"], format="BGR")
    transform_list = [
        T.RandomBrightness(0.4, 1.3),
        T.RandomCrop('relative_range', (0.6, 0.6)),
        T.RandomFlip(prob=0.4, horizontal=True, vertical=False), 
    ]
    image, transforms = T.apply_transform_gens(transform_list, image)
    dataset_dict["image"] = torch.as_tensor(image.transpose(2, 0, 1).astype("float32"))

    annos = [
        utils.transform_instance_annotations(obj, transforms, image.shape[:2])
        for obj in dataset_dict.pop("annotations")
        if obj.get("iscrowd", 0) == 0
    ]
    instances = utils.annotations_to_instances(annos, image.shape[:2])
    dataset_dict["instances"] = utils.filter_empty_instances(instances)
    return dataset_dict

"""## Make validation loss hook """

class LossHook(HookBase):
    def __init__(self, eval_period, model, data_loader):
        self._model = model
        self._period = eval_period
        self._data_loader = data_loader
    
    def _do_loss_eval(self):
        total = len(self._data_loader)
        num_warmup = min(5, total - 1)
            
        start_time = time.perf_counter()
        total_compute_time = 0
        losses = []
        for idx, inputs in enumerate(self._data_loader):            
            if idx == num_warmup:
                start_time = time.perf_counter()
                total_compute_time = 0
            start_compute_time = time.perf_counter()
            if torch.cuda.is_available():
                torch.cuda.synchronize()
            total_compute_time += time.perf_counter() - start_compute_time
            iters_after_start = idx + 1 - num_warmup * int(idx >= num_warmup)
            seconds_per_img = total_compute_time / iters_after_start
            if idx >= num_warmup * 2 or seconds_per_img > 5:
                total_seconds_per_img = (time.perf_counter() - start_time) / iters_after_start
                eta = datetime.timedelta(seconds=int(total_seconds_per_img * (total - idx - 1)))
                log_every_n_seconds(
                    logging.INFO,
                    "Loss on Validation  done {}/{}. {:.4f} s / img. ETA={}".format(
                        idx + 1, total, seconds_per_img, str(eta)
                    ),
                    n=5,
                )
            loss_batch = self._get_loss(inputs)
            losses.append(loss_batch)
        mean_loss = np.mean(losses)
        self.trainer.storage.put_scalar('validation_loss', mean_loss)
        comm.synchronize()

        return losses
            
    def _get_loss(self, data):
        metrics_dict = self._model(data)
        metrics_dict = {
            k: v.detach().cpu().item() if isinstance(v, torch.Tensor) else float(v)
            for k, v in metrics_dict.items()
        }
        total_losses_reduced = sum(loss for loss in metrics_dict.values())
        return total_losses_reduced
        
        
    def after_step(self):
        next_iter = self.trainer.iter + 1
        is_final = next_iter == self.trainer.max_iter
        if is_final or (self._period > 0 and next_iter % self._period == 0):
            self._do_loss_eval()
        self.trainer.storage.put_scalars(timetest=12)

"""## Make custom trainer called Trainer"""

class Trainer(DefaultTrainer):
    @classmethod
    def build_train_loader(cls, cfg):
        return build_detection_train_loader(cfg, mapper=custom_mapper) #tells it to do augmentation

    @classmethod
    def build_evaluator(cls, cfg, dataset_name, output_folder=None):
        if output_folder is None:
            output_folder = os.path.join(cfg.OUTPUT_DIR, "inference")
        return COCOEvaluator(dataset_name, cfg, True, output_folder)
                     
    def build_hooks(self):
        hooks = super().build_hooks()
        hooks.insert(-1,LossHook(
            cfg.TEST.EVAL_PERIOD,
            self.model,
            build_detection_test_loader(
                self.cfg,
                self.cfg.DATASETS.TEST[0],
                DatasetMapper(self.cfg,True)
            )
        ))
        return hooks

"""## Load data"""

#List the five classes 
classes = ['sink', 'door', 'bed', 'screen', 'socket']

#Give path to data - if path is not on drive change the path before running
data_path = '/content/drive/MyDrive/robotdata/Blue_ocean_dataset2/'

for d in ["train", "valid"]:
    DatasetCatalog.register(
        "robot_" + d, 
        lambda d=d: get_data_dicts(data_path+d, classes) #uses get_data_dicts function to make data into COCO format
    )
    MetadataCatalog.get("robot_" + d).set(thing_classes=classes)

#Collect the data into metadatacatalog 
microcontroller_metadata = MetadataCatalog.get("robot_train")

#Convert trainingset to COCO format and save as train_dicts
train_dicts = get_data_dicts(data_path+'train', classes)

#Convert validationset to COCO format and save as valid_dicts
valid_dicts = get_data_dicts(data_path+'valid', classes)

"""### Visualize loaded data"""

#Visualize for checking the data is loaded properly 
for d in random.sample(train_dicts, 5):
    img = cv2.imread(d["file_name"])
    v = Visualizer(img[:, :, ::-1], metadata=microcontroller_metadata, scale=0.5)
    v = v.draw_dataset_dict(d)
    plt.figure(figsize = (14, 10))
    plt.imshow(cv2.cvtColor(v.get_image()[:, :, ::-1], cv2.COLOR_BGR2RGB))
    plt.show()

"""# Hyperparameter search part 1: Lr and gamma values

## R50

### Train model
"""

cfg = get_cfg()
cfg.merge_from_file(model_zoo.get_config_file("COCO-Detection/faster_rcnn_R_50_FPN_1x.yaml")) #Load model
cfg.DATASETS.TRAIN = ('robot_train',)
cfg.DATASETS.TEST = ('robot_valid',)  #Give validationset to validate on 
cfg.TEST.EVAL_PERIOD = 200 #For every 200 iter it will track on validation set
cfg.DATALOADER.NUM_WORKERS = 2
cfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url("COCO-Detection/faster_rcnn_R_50_FPN_1x.yaml") #Load model
cfg.SOLVER.IMS_PER_BATCH = 4 #Set to four to run on collab due to limited resources
cfg.SOLVER.MAX_ITER = 2000 
cfg.SOLVER.STEPS = (200)
cfg.MODEL.ROI_HEADS.NUM_CLASSES = 5 #number of classes

#Hyperparameters:
lr= 0.00025 # 0.03, 0.1 - replace variable with the desired lr option
g= 0.1 # 0.01, 0.5 - replace variable with the desired gamma option
cfg.SOLVER.BASE_LR = lr
cfg.SOLVER.GAMMA = g

os.makedirs(cfg.OUTPUT_DIR, exist_ok=True) #create output directory for output
trainer= Trainer(cfg) #Use custom trainer
trainer.resume_or_load(resume=False)
trainer.train() #train model

"""### Tensorboard over training"""

# Commented out IPython magic to ensure Python compatibility.
# Look at training curves in tensorboard:
# %load_ext tensorboard
# %tensorboard --logdir output

"""### Save model"""

directory=str(lr)+"_"+str(g)
drive='/content/drive/MyDrive'
path=os.path.join(drive,directory)
os.mkdir(path)
src="/content/output/"

for f in os.scandir(src):
  if f.is_dir():
    newpath=os.path.join(path,f.name)
    print(newpath)
    os.mkdir(newpath)
    for fi in os.scandir(f):
      shutil.copy(fi,newpath)
  elif f.is_file():
    shutil.copy(f,path)

"""## R101

### Train model
"""

cfg = get_cfg()
cfg.merge_from_file(model_zoo.get_config_file("COCO-Detection/faster_rcnn_R_101_FPN_3x.yaml")) #load model
cfg.DATASETS.TRAIN = ('robot_train',)
cfg.DATASETS.TEST = ('robot_valid',)  #Give validation set to validate on
cfg.TEST.EVAL_PERIOD = 200 #for every 200 iter the model will track validation loss 
cfg.DATALOADER.NUM_WORKERS = 2
cfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url("COCO-Detection/faster_rcnn_R_101_FPN_3x.yaml") #load weights
cfg.SOLVER.IMS_PER_BATCH = 4 #set to four so it can run in collab due to limited resources
cfg.SOLVER.MAX_ITER = 2000 #number of iterations 
cfg.SOLVER.STEPS = (200)
cfg.MODEL.ROI_HEADS.NUM_CLASSES = 5 #Number of classes

#Hyperparameters:
lr= 0.00025 # 0.03, 0.1 - replace variable with the desired lr option
g= 0.1 # 0.01, 0.5 - replace variable with the desired gamma option
cfg.SOLVER.BASE_LR =lr
cfg.SOLVER.GAMMA =g

os.makedirs(cfg.OUTPUT_DIR, exist_ok=True) #make output directory for output
trainer= Trainer(cfg) #Use custom trainer with data augmentation
trainer.resume_or_load(resume=False)
trainer.train() #Train model

"""### Tensorboard over training"""

# Commented out IPython magic to ensure Python compatibility.
# Look at training curves in tensorboard:
# %load_ext tensorboard
# %tensorboard --logdir output

"""###Save model"""

directory=str(lr)+"_"+str(g)
drive='/content/drive/MyDrive'
path=os.path.join(drive,directory)
os.mkdir(path)
src="/content/output/"

for f in os.scandir(src):
  if f.is_dir():
    newpath=os.path.join(path,f.name)
    print(newpath)
    os.mkdir(newpath)
    for fi in os.scandir(f):
      shutil.copy(fi,newpath)
  elif f.is_file():
    shutil.copy(f,path)

"""# Hyperparameter search part 2: Lr, gamma and weight decay values

## R50

### Train model
"""

cfg = get_cfg()
cfg.merge_from_file(model_zoo.get_config_file("COCO-Detection/faster_rcnn_R_50_FPN_1x.yaml")) #Load model
cfg.DATASETS.TRAIN = ('robot_train',)
cfg.DATASETS.TEST = ('robot_valid',)  # Give validation set to track 
cfg.TEST.EVAL_PERIOD = 200 # for each 200 iter the model will track validationset
cfg.DATALOADER.NUM_WORKERS = 2
cfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url("COCO-Detection/faster_rcnn_R_50_FPN_1x.yaml") #Load weights
cfg.SOLVER.IMS_PER_BATCH = 4 # Set to four to be able to run in collab due to limited resources
cfg.SOLVER.MAX_ITER = 4000 # number of iterations
cfg.SOLVER.STEPS = (500, 1000, 1500, 2000, 2500, 3000, 3500)
cfg.MODEL.ROI_HEADS.NUM_CLASSES = 5 #Number of classes

#Hyperparameters:
lr = 0.05 # 0.1, 0.01, 0.05 - change lr to the option you want
g= 0.01 # 0.01, 0.1 0.5 - change gamma to the option you want
wd = 0.00025 #0.00025, 0.0005 - change weight decay to the option you want

cfg.SOLVER.BASE_LR = lr
cfg.SOLVER.GAMMA = g
cfg.SOLVER.WEIGHT_DECAY = wd

os.makedirs(cfg.OUTPUT_DIR, exist_ok=True) #create output directory for output
trainer= Trainer(cfg) # use custom trainer with data augmentation
trainer.resume_or_load(resume=False)
trainer.train() # train model

"""### Tensorboard over training"""

# Commented out IPython magic to ensure Python compatibility.
# %load_ext tensorboard
# %tensorboard --logdir output

"""### Save model"""

directory=str(lr)+"_"+str(g)+"_"+str(wd)
drive='/content/drive/MyDrive'
path=os.path.join(drive,directory)
os.mkdir(path)
src="/content/output/"

for f in os.scandir(src):
  if f.is_dir():
    newpath=os.path.join(path,f.name)
    print(newpath)
    os.mkdir(newpath)
    for fi in os.scandir(f):
      shutil.copy(fi,newpath)
  elif f.is_file():
    shutil.copy(f,path)

"""## R101

### Train model
"""

cfg = get_cfg()
cfg.merge_from_file(model_zoo.get_config_file("COCO-Detection/faster_rcnn_R_101_FPN_3x.yaml")) #Load model
cfg.DATASETS.TRAIN = ('robot_train',)
cfg.DATASETS.TEST = ('robot_valid',)  # Give validation set to track 
cfg.TEST.EVAL_PERIOD = 200 # for each 200 iter the model will track validationset
cfg.DATALOADER.NUM_WORKERS = 2
cfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url("COCO-Detection/faster_rcnn_R_101_FPN_3x.yaml") #Load weights
cfg.SOLVER.IMS_PER_BATCH = 4 # Set to four to be able to run in collab due to limited resources
cfg.SOLVER.MAX_ITER = 4000 # number of iterations
cfg.SOLVER.STEPS = (500, 1000, 1500, 2000, 2500, 3000, 3500)
cfg.MODEL.ROI_HEADS.NUM_CLASSES = 5 #Number of classes

#Hyperparameters:
lr = 0.05 # 0.1, 0.01, 0.05 - change lr to the option you want
g= 0.01 # 0.01, 0.1 0.5 - change gamma to the option you want
wd = 0.00025 #0.00025, 0.0005 - change weight decay to the option you want

cfg.SOLVER.BASE_LR = lr
cfg.SOLVER.GAMMA = g
cfg.SOLVER.WEIGHT_DECAY = wd

os.makedirs(cfg.OUTPUT_DIR, exist_ok=True) #create output directory for output
trainer= Trainer(cfg) # use custom trainer with data augmentation
trainer.resume_or_load(resume=False)
trainer.train() # train model

"""### Tensorboard over training"""

# Commented out IPython magic to ensure Python compatibility.
# %load_ext tensorboard
# %tensorboard --logdir output

"""### Save model"""

directory=str(lr)+"_"+str(g)+"_"+str(wd)
drive='/content/drive/MyDrive'
path=os.path.join(drive,directory)
os.mkdir(path)
src="/content/output/"

for f in os.scandir(src):
  if f.is_dir():
    newpath=os.path.join(path,f.name)
    print(newpath)
    os.mkdir(newpath)
    for fi in os.scandir(f):
      shutil.copy(fi,newpath)
  elif f.is_file():
    shutil.copy(f,path)